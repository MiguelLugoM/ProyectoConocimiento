@page "/tipoProducto"
<!--
Define la URL relativa que carga este componente. En este caso, cuando un usuario navega a "/tipoProducto",
este componente Blazor se carga y se representa en la página.
-->
@using BlazorFrontEnd.Services
<!--
// Importa el espacio de nombres BlazorFrontEnd.Services para que puedas utilizar los servicios dentro de este componente.
-->
@inject ApiService ApiService
<!--
// Inyecta una instancia del servicio ApiService. Esto permite que el componente llame a la API a través de este servicio.
-->
@inject IJSRuntime JSRuntime
<!--
// Inyecta IJSRuntime, que es un servicio Blazor para ejecutar JavaScript desde C#.
-->
<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Tipo de Producto</b></h2>
                        <!-- Título de la tabla que indica que se trata de la gestión de Tipo de Productos -->
                    </div>
                    <div class="col-sm-6">
                        <a href="#addTipoProductoModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nueva Tipo de producto</span>
                        </a>
                        <!-- Botón que abre el modal para añadir una nueva persona -->
 
                        <a href="#x" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Tipo de producto</span>
                        </a>
                        <!-- Botón que abre el modal para consultar una persona existente -->
                    </div>
                </div>
            </div>
            @if (tipoProductos == null)
            {
                <p>Cargando...</p>
                <!-- Muestra un mensaje mientras se cargan los datos -->
            }
            else if (!tipoProductos.Any())
            {
                <p>No hay personas registradas.</p>
                <!-- Muestra un mensaje si no hay tipo de Productos en la lista -->
            }
            else
            {
                <!-- Muestra la tabla con la lista de tipo de productos si la lista contiene datos -->
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>id</th>
                            <th>categoria</th>
                            <th>clase</th>
                            <th>nombre</th>
                            <th>tipologia</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var tipoProducto in tipoProductos)
                        {
                            <tr>
                                <td>@tipoProducto["id"]</td>
                                <!-- Muestra el id del tipo de producto -->
                                <td>@tipoProducto["categoria"]</td>
                                <!-- Muestra la categoria del tipo de producto -->
                                <td>@tipoProducto["clase"]</td>
                                <!-- Muestra la clase del tipo de producto -->
                                <td>@tipoProducto["nombre"]</td>
                                <!-- Muestra el nombre del tipo de producto -->
                                <td>@tipoProducto["tipologia"]</td>
                                <!-- Muestra la tipologia del tipo de producto -->
                                <td>
                                    <a href="#editPersonaModal" class="edit" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit(tipoProducto)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <!-- Botón para editar el tipo de producto -->
 
                                    <a href="#deleteTipoProductoModal" class="delete" data-bs-toggle="modal" @onclick="() => SetTipoProductoToDelete(tipoProducto)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                    <!-- Botón para eliminar el tipo de producto -->
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

    <!-- Modal para Eliminar tipo de producto -->
    <div class="modal fade" id="deleteTipoProductoModal" tabindex="-1" role="dialog" aria-labelledby="deleteTipoProductoModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteTipoProductoModalLabel">Eliminar Tipo de Producto</h5>
                    <!-- Título del modal para eliminar un tipo de producto -->
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar este tipo de producto?</p>
                    <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                    <!-- Mensaje de advertencia para la eliminación -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteTipoProducto">Eliminar</button>
                    <!-- Botón para confirmar la eliminación del tipo de producto -->
                </div>
            </div>
        </div>
    </div>

@code
{
    private List<Dictionary<string, object>> tipoProductos = new List<Dictionary<string, object>>();
    // Lista que almacena el tipo de producto obtenidos desde la API

    private Dictionary<string, object> currentTipoProducto = new Dictionary<string, object>();
    // Diccionario que representa el tipo de producto actual que se está añadiendo o editando

    private bool isNewTipoProducto = true;
    // Bandera que indica si se esta anadiendo una nueva persona o editando una existente

    private bool tipoProductoEncontrado = false;
    // Bandera que indica si un tipo de producto fue encontrado durante la consulta

    private int id = 0;
    // Variable que almacena el id del tipo de producto durante la edicion o creacion

    private string categoria = "";
    // Variable que almacena la categoria del tipo de producto durante la edicion o creacion

    private string clase = "";
    // Variable que almacena la clase del tipo de producto durante la edicion o creacion

    private string nombre = "";
    // Variable que almacena el nombre del tipo de producto durante la edicion o creacion

    private string tipologia = "";
    // Variable que almacena la tipologia del tipo de producto durante la edicion o creacion

    private int consultaId = 0;
    // Variable que almacena el id del codigo de producto que se va a consultar

    private string consultaCategoria = "";
    // Variable que almacena la catergoria del tipo de producto que se encontro durante la consulta

    private string consultaClase = "";
    // Variable que almacena la clase del tipo de producto que se encontro durante la consulta

    private string consultaNombre = "";
    // Varibale que almacena el nombre del tipo de producto que se encontro durante la consulta

    private string consultaTipologia = "";
    //  Variable que almacena la tipologia del tipo de producto que se encontro durante la consulta

        protected override async Task OnInitializedAsync()
    {
        await LoadTipoProducto();
        // Método que se ejecuta al inicializar el componente. Carga la lista de personas desde la API.
    }

        private void PrepareForAddOrEdit(Dictionary<string, object>? tipoProducto = null)
    {
        isNewTipoProducto = tipoProducto == null;
        // Si 'tipoProducto' es null, significa que estamos añadiendo una nuevo tipo de producto. De lo contrario, estamos editando.
        currentTipoProducto = tipoProducto ?? new Dictionary<string, object>();
        // Si 'tipoProducto' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario del tipoProducto seleccionada.

        id = currentTipoProducto.TryGetValue("id", out var c) && c is int idValue ? idValue : 0;
        categoria = currentTipoProducto.TryGetValue("categoria", out var n) ? n?.ToString() ?? "" : "";
        clase = currentTipoProducto.TryGetValue("clase", out var e) ? e?.ToString() ?? "" : "";
        nombre = currentTipoProducto.TryGetValue("nombre", out var t) ? t?.ToString() ?? "" : "";
        tipologia = currentTipoProducto.TryGetValue("tipologia", out var f) ? f?.ToString() ?? "" : "";
        // Extrae los valores de 'id', 'categoria', 'clase' , 'nombre' y 'tipologia' de 'currentTipoProducto' y los asigna a las variables correspondientes.
 
        JSRuntime.InvokeVoidAsync("showModal", "addTipoProductoModal");
        // Muestra el modal para añadir o editar Tipo de producto usando JavaScript.
    }

        private void PrepareForConsulta()
    {
        consultaId = 0;
        consultaCategoria = "";
        consultaClase = "";
        consultaNombre = "";
        tipoProductoEncontrado = false;
        // Limpia los campos de consulta y establece 'tipoProductoEncontrado' en false.
    }
    private void SetTipoProductoToDelete(Dictionary<string, object> tipoProducto)
    {
        currentTipoProducto = tipoProducto;
        // Establece el tipo de producto actual como el tipo de producto a eliminar.
        JSRuntime.InvokeVoidAsync("showModal", "deleteTipoProductoModal");
        // Muestra el modal para confirmar la eliminación usando JavaScript.

    }

    private async Task LoadTipoProducto()
    {
        try
        {
            tipoProductos = await ApiService.GetDataAsync("api/BDCONOCIMIENTO/tipo_producto");
            // Llama a la API para obtener la lista de tipo de producto y la almacena en la variable 'tipoProductos'.
    
            StateHasChanged();
            // Fuerza la actualización de la UI después de cargar los datos.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar tipo de producto: {ex.Message}");
            // Muestra un error en la consola si la carga de tipo de producto falla.
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar tipo de producto. Por favor, intente nuevamente.");
            // Muestra una alerta en la página indicando que hubo un error al cargar los tipos de productos.
        }
    }

    private async Task DeleteTipoProducto()
    {
        try
        {
            if (currentTipoProducto.TryGetValue("id", out var codigoObj) && codigoObj is int codigoInt)
            {
                bool success = await ApiService.DeleteEntityAsync("api/BDCONOCIMIENTO/tipo_producto/id", codigoInt.ToString());
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteTipoProductoModal");
                    await LoadTipoProducto();
                    await JSRuntime.InvokeVoidAsync("alert", "Tipo de producto eliminado con éxito.");

                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar tipo de producto. Por favor, intente nuevamente.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar tipo de producto: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el tipo de producto. Por favor, intente nuevamente.");
        }
    }
}
